
if(${CAGE_EMBED_FILE_RUN})

	message(STATUS "embedding file) input: ${CAGE_EMBED_FILE_INPUT_PATH}")
	message(STATUS "embedding file) output: ${CAGE_EMBED_FILE_OUTPUT_PATH}")
	message(STATUS "embedding file) variable: ${CAGE_EMBED_FILE_VAR_NAME}")

	file(READ "${CAGE_EMBED_FILE_INPUT_PATH}" content HEX)
	string(REGEX MATCHALL "([a-f0-9][a-f0-9])" content ${content})

	set(counter 0)
	foreach(hex IN LISTS content)
		string(APPEND output_c "0x${hex},")
		math(EXPR counter "${counter}+1")
		if(counter GREATER 16)
			string(APPEND output_c "\n")
			set(counter 0)
		endif()
	endforeach()

	set(output_c "
// DO NOT MODIFY THIS FILE, it is autogenerated from:
// ${CAGE_EMBED_FILE_INPUT_PATH}

#include <cage-core/core.h>
static constexpr const cage::uint8 tmp[] = {
${output_c}
};
cage::PointerRange<const cage::uint8> ${CAGE_EMBED_FILE_VAR_NAME}() { return tmp; }
")

	file(WRITE "${CAGE_EMBED_FILE_OUTPUT_PATH}" "${output_c}")

else()

	set(CAGE_EMBED_FILE_SOURCE_PATH "${CMAKE_CURRENT_LIST_DIR}" CACHE PATH "" FORCE)

	function(cage_embed_file target filename varname)
		set(inname "${CMAKE_CURRENT_SOURCE_DIR}/${filename}")
		set(outname "${CMAKE_CURRENT_BINARY_DIR}/${filename}.cpp")
		add_custom_command(
			OUTPUT "${outname}" 
			COMMAND ${CMAKE_COMMAND} -DCAGE_EMBED_FILE_RUN=1 -DCAGE_EMBED_FILE_INPUT_PATH="${inname}" -DCAGE_EMBED_FILE_OUTPUT_PATH="${outname}" -DCAGE_EMBED_FILE_VAR_NAME="${varname}" -P "${CAGE_EMBED_FILE_SOURCE_PATH}/cage_embed_file.cmake"
			MAIN_DEPENDENCY ${inname}
		)
		target_sources(${target} PRIVATE ${outname})
	endfunction(cage_embed_file)

endif()
