cmake_minimum_required(VERSION 3.10)

# make cmake find our own provided libraries
# the libraries provided here have higher priority than system libraries
set(CAGE_EXTERNALS_MODULE_PATH "${CMAKE_CURRENT_BINARY_DIR}/cmake-modules")
set(CAGE_EXTERNALS_MODULE_PATH "${CAGE_EXTERNALS_MODULE_PATH}" PARENT_SCOPE)
list(INSERT CMAKE_MODULE_PATH 0 "${CAGE_EXTERNALS_MODULE_PATH}")
list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
include(cmake/cage_gen_module.cmake)

# unset visibility preset
unset(CMAKE_C_VISIBILITY_PRESET)
unset(CMAKE_CXX_VISIBILITY_PRESET)
unset(CMAKE_VISIBILITY_INLINES_HIDDEN)

# ensure that all libraries are distinguishable from system libraries
set(CMAKE_IMPORT_LIBRARY_PREFIX "${CMAKE_IMPORT_LIBRARY_PREFIX}cage-")
set(CMAKE_SHARED_LIBRARY_PREFIX "${CMAKE_SHARED_LIBRARY_PREFIX}cage-")
set(CMAKE_SHARED_MODULE_PREFIX "${CMAKE_SHARED_MODULE_PREFIX}cage-")

# disable compilation warnings
if(MSVC)
	string(REPLACE "/W3" "/W0" CMAKE_C_FLAGS ${CMAKE_C_FLAGS})
	string(REPLACE "/W3" "/W0" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
endif()

# disable warnings that some files produced no symbols
if(MSVC)
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -ignore:4221")
	set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} -ignore:4221")
endif()

add_subdirectory(zlib-ng)
add_subdirectory(libpng)
add_subdirectory(jpeg)
add_subdirectory(libtiff)
add_subdirectory(freetype)
add_subdirectory(assimp)
add_subdirectory(glad)
add_subdirectory(glm)
add_subdirectory(glfw)
add_subdirectory(libsoundio)
add_subdirectory(dr_libs)
add_subdirectory(ogg)
add_subdirectory(vorbis)
add_subdirectory(utfcpp)
add_subdirectory(simplefilewatcher)
add_subdirectory(msdfgen)
add_subdirectory(xsimd)
add_subdirectory(fastnoise)
add_subdirectory(libzip)
add_subdirectory(optick)
add_subdirectory(robin-hood-hashing)
add_subdirectory(hsluv)
add_subdirectory(stb)
add_subdirectory(xatlas)
add_subdirectory(pmp)
add_subdirectory(dualmc)

add_dependencies(png_static zlib)
add_dependencies(jpeg-static zlib)
add_dependencies(zip zlib)
add_dependencies(tiff jpeg-static)
add_dependencies(freetype png_static)
add_dependencies(vorbis ogg)
add_dependencies(lib_msdfgen freetype)

set_target_properties(zlib PROPERTIES FOLDER cage/externals)
set_target_properties(png_static PROPERTIES FOLDER cage/externals)
set_target_properties(genfiles PROPERTIES FOLDER cage/externals)
set_target_properties(jpeg-static PROPERTIES FOLDER cage/externals)
set_target_properties(simd PROPERTIES FOLDER cage/externals)
if(TARGET simd-objs)
	set_target_properties(simd-objs PROPERTIES FOLDER cage/externals)
endif()
set_target_properties(tiff PROPERTIES FOLDER cage/externals)
set_target_properties(tiffxx PROPERTIES FOLDER cage/externals)
set_target_properties(freetype PROPERTIES FOLDER cage/externals)
set_target_properties(assimp PROPERTIES FOLDER cage/externals)
set_target_properties(IrrXML PROPERTIES FOLDER cage/externals)
set_target_properties(glad PROPERTIES FOLDER cage/externals)
set_target_properties(glfw PROPERTIES FOLDER cage/externals)
set_target_properties(libsoundio_shared PROPERTIES FOLDER cage/externals)
set_target_properties(dr_libs PROPERTIES FOLDER cage/externals)
set_target_properties(ogg PROPERTIES FOLDER cage/externals)
set_target_properties(vorbis PROPERTIES FOLDER cage/externals)
set_target_properties(vorbisenc PROPERTIES FOLDER cage/externals)
set_target_properties(vorbisfile PROPERTIES FOLDER cage/externals)
set_target_properties(simplefilewatcher PROPERTIES FOLDER cage/externals)
set_target_properties(lib_msdfgen PROPERTIES FOLDER cage/externals)
set_target_properties(fastnoise PROPERTIES FOLDER cage/externals)
set_target_properties(zip PROPERTIES FOLDER cage/externals)
set_target_properties(OptickCore PROPERTIES FOLDER cage/externals)
if(TARGET OptickGui)
	set_target_properties(OptickGui PROPERTIES FOLDER cage/utility EXCLUDE_FROM_ALL false)
endif()
set_target_properties(robin-hood-hashing PROPERTIES FOLDER cage/externals)
set_target_properties(hsluv PROPERTIES FOLDER cage/externals)
set_target_properties(stb PROPERTIES FOLDER cage/externals)
set_target_properties(xatlas PROPERTIES FOLDER cage/externals)
set_target_properties(pmp PROPERTIES FOLDER cage/externals)
set_target_properties(dualmc PROPERTIES FOLDER cage/externals)


# disable compilation warnings
function(disable_compilation_warnings target)
	if(MSVC)
		get_target_property(v ${target} COMPILE_FLAGS)
		if(v)
			string(REGEX REPLACE "/W[0-9]" "" v "${v}")
			set_target_properties(${target} PROPERTIES COMPILE_FLAGS "${v}")
		endif()
		get_target_property(v ${target} COMPILE_OPTIONS)
		if(v)
			list(FILTER v EXCLUDE REGEX "/W[0-9]")
			set_target_properties(${target} PROPERTIES COMPILE_OPTIONS "${v}")
		endif()
	endif()
	target_compile_options(${target} PRIVATE "-w")
endfunction()

disable_compilation_warnings(zlib)
disable_compilation_warnings(png_static)
#disable_compilation_warnings(genfiles)
disable_compilation_warnings(jpeg-static)
disable_compilation_warnings(simd)
if(TARGET simd-objs)
	disable_compilation_warnings(simd-objs)
endif()
disable_compilation_warnings(tiff)
disable_compilation_warnings(tiffxx)
disable_compilation_warnings(freetype)
disable_compilation_warnings(assimp)
disable_compilation_warnings(IrrXML)
disable_compilation_warnings(glad)
disable_compilation_warnings(glfw)
disable_compilation_warnings(libsoundio_shared)
disable_compilation_warnings(dr_libs)
disable_compilation_warnings(ogg)
disable_compilation_warnings(vorbis)
disable_compilation_warnings(vorbisenc)
disable_compilation_warnings(vorbisfile)
disable_compilation_warnings(simplefilewatcher)
disable_compilation_warnings(lib_msdfgen)
disable_compilation_warnings(fastnoise)
disable_compilation_warnings(zip)
disable_compilation_warnings(OptickCore)
if(TARGET OptickGui)
	disable_compilation_warnings(OptickGui)
endif()
disable_compilation_warnings(robin-hood-hashing)
disable_compilation_warnings(hsluv)
disable_compilation_warnings(stb)
disable_compilation_warnings(xatlas)
disable_compilation_warnings(pmp)
disable_compilation_warnings(dualmc)


